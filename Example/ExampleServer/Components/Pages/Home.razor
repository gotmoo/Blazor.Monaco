@page "/"
@using Blazor.Monaco
<PageTitle>Home</PageTitle>

<h1>Blazor.Monaco examples</h1>

<p>Monaco editor in a Razor component with Change and Save handling. Press <code>Control + S</code> to save the editor contents to the text area below.</p>
<div class="card card-body example-spacing" style="width: fit-content; background-color: #cff4fc;">
    <MonacoEditor ElementId="script-one"
                  Language="Language.JavaScript"
                  OnContentChanged="OnEditorContentChanged"
                  OnSaveRequested="OnEditorSaveRequested"
                  ScriptContent="@MyScript"
                  @ref="_monacoEditorInstance"
                  Style="width:800px; height:400px;"
    />
    <div class="card card-body example-spacing " style="background-color: #20c997; margin-top:  1em;">
        <div class="alert alert-info col-5">
            Have the contents changed?
            @if (_showSaveMessage)
            {
                <span class="alert-success"> Saved! </span>
            }
            else
            {
                <span> @(ContentChanged ? "Yes" : "No") </span>
            }
        </div>
        <div class="row-cols-auto">
            <button class="btn btn-light" @onclick="GetContentsFromEditor">Read from Editor</button>
            <label class="form-check-label">
                <InputCheckbox class="form-check-input" @bind-Value="@_readChangeReset"/>
                Reset changed on read?</label>
            <button class="btn btn-light" @onclick="SendContentsToEditor">Send to Editor</button>
        </div>
    </div>
</div>
<div class="example-spacing">
    <InputTextArea class="form-control" id="script-two" style="width: 800px; height: 300px; font-family: monospace;"
                   @bind-Value="MyScript"></InputTextArea>
</div>

@code {
    private bool ContentChanged { get; set; }
    private string MyScript { get; set; } = string.Empty;
    private MonacoEditor _monacoEditorInstance = null!;
    private bool _readChangeReset;
    private bool _showSaveMessage;

    private void OnEditorContentChanged(bool hasChanged)
    {
        Console.WriteLine($"OnEditorContentChanged: {hasChanged}");
        ContentChanged = hasChanged;
    }

    private async Task OnEditorSaveRequested()
    {
        Console.WriteLine("OnEditorSaveRequested");
        MyScript = await _monacoEditorInstance.GetEditorContent(resetChangedOnRead: true);
        _showSaveMessage = true;
        StateHasChanged();
        await Task.Delay(5000); // Wait for 5 seconds
        _showSaveMessage = false;
        StateHasChanged();
    }

    private async Task GetContentsFromEditor()
    {
        MyScript = await _monacoEditorInstance.GetEditorContent(_readChangeReset);
    }

    private async Task SendContentsToEditor()
    {
        await _monacoEditorInstance.SetEditorContent(MyScript);
    }

}